uid: auto_off_item_after_specified_time
tags: []
props:
  parameters: []
  parameterGroups: []
timestamp: Jul 24, 2023, 10:27:55 PM
component: BlockLibrary
config:
  name: Auto Off Item
slots:
  blocks:
    - component: BlockType
      config:
        args0:
          - check: String
            name: item
            type: input_value
          - check: Number
            name: duration
            type: input_value
          - name: duration_unit
            options:
              - - seconds
                - plusSeconds
              - - minutes
                - plusMinutes
              - - hours
                - plusHours
            type: field_dropdown
        colour: 300
        helpUrl: ""
        inputsInline: true
        message0: after %2 %3 turn off item %1
        nextStatement: ""
        previousStatement: ""
        tooltip: Automatically turn off Item after X time
        type: AutoOffItem
      slots:
        code:
          - component: BlockCodeTemplate
            config:
              template: >
                var tmr, msg; var zdt = Java.type('java.time.ZonedDateTime');

                function stopTimer(x) {
                  if (cache.private.exists(x) && cache.private.get(x).isActive()) {
                    if (cache.private.exists(x)) { cache.private.remove(x).cancel(); };
                  }
                }

                tmr = String({{input:item}}) + '_tmr';

                if (items.getItem({{input:item}}).getState() == 'ON') {
                  stopTimer(tmr);

                  if (cache.private.exists(tmr) && cache.private.get(tmr).hasTerminated()) {
                    if (cache.private.exists(tmr) === false || cache.private.get(tmr).hasTerminated()) {
                      cache.private.put(tmr, {{utility:scriptExecution}}.createTimer(tmr, {{utility:zdt}}.now().{{field:duration_unit}}({{input:duration}}), function () {
                        events.sendCommand({{input:item}}, 'OFF');
                        cache.private.remove(tmr);
                      }));
                    };
                  }
                } else if (items.getItem({{input:item}}).getState() == 'OFF') {
                  stopTimer(tmr);
                }
    - component: BlockType
      config:
        args0:
          - check: String
            name: item
            type: input_value
          - check: Number
            name: duration
            type: input_value
          - name: duration_unit
            options:
              - - seconds
                - plusSeconds
              - - minutes
                - plusMinutes
              - - hours
                - plusHours
            type: field_dropdown
          - default: mail@demo
            name: timer_statement
            type: input_statement
        colour: 300
        helpUrl: ""
        inputsInline: true
        message0: after %2 %3 turn off Item %1 %4 and execute statement
        nextStatement: ""
        previousStatement: ""
        tooltip: Automatically turn off Item after X time
        type: AutoOffItemWithStatement
      slots:
        code:
          - component: BlockCodeTemplate
            config:
              template: >
                var tmr, msg; var zdt = Java.type('java.time.ZonedDateTime');

                function stopTimer(x) {
                  if (cache.private.exists(x) && cache.private.get(x).isActive()) {
                    if (cache.private.exists(x)) { cache.private.remove(x).cancel(); };
                  }
                }

                tmr = String({{input:item}}) + '_tmr';

                if (items.getItem({{input:item}}).getState() == 'ON') {
                  stopTimer(tmr);

                  if (cache.private.exists(tmr) && cache.private.get(tmr).hasTerminated()) {
                    if (cache.private.exists(tmr) === false || cache.private.get(tmr).hasTerminated()) {
                      cache.private.put(tmr, {{utility:scriptExecution}}.createTimer(tmr, {{utility:zdt}}.now().{{field:duration_unit}}({{input:duration}}), function () {
                        events.sendCommand({{input:item}}, 'OFF');
                        {{statements:timer_statement}}
                        cache.private.remove(tmr);
                      }));
                    };
                  }                  
                } else if (items.getItem({{input:item}}).getState() == 'OFF') {
                  stopTimer(tmr);
                }  
  utilities:
    - component: UtilityJavaType
      config:
        javaClass: org.openhab.io.openhabcloud.NotificationAction
        name: notifications
    - component: UtilityJavaType
      config:
        javaClass: org.openhab.core.model.script.actions.ScriptExecution
        name: scriptExecution
    - component: UtilityJavaType
      config:
        javaClass: java.time.ZonedDateTime
        name: zdt
    - component: UtilityJavaType
      config:
        javaClass: java.time.format.DateTimeFormatter
        name: dtf
